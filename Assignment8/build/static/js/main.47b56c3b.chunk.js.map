{"version":3,"sources":["logic/NavPage.ts","logic/Giph.ts","logic/Store.ts","view/styles/GlobalStyle.ts","view/components/GiphView.tsx","view/components/GiphGallery.tsx","view/components/LoadScreen.tsx","view/components/MenuButton.tsx","view/components/Navbar.tsx","view/components/NextButton.tsx","view/components/Pagination.tsx","view/components/SearchBar.tsx","view/components/App.tsx","index.tsx"],"names":["NavPage","Giph","name","url","this","Store","disposer","giphs","currentNavPage","TRENDING","isLoaded","currentPage","totalPages","searchContent","autorun","deleteGiphs","fetchContent","makeObservable","navPage","title","push","type","searchResult","searchAsNumber","parseInt","isNaN","APIKey","maxGifsPerPage","SEARCH","createURL","fetch","then","response","json","data","forEach","row","addGiph","images","fixed_height","allGiphs","pagination","total_count","Math","ceil","setLoaded","observable","action","computed","GlobalStyle","createGlobalStyle","GiphWrapper","styled","div","observer","props","src","alt","GalleryWrapper","store","map","currentGif","key","ImageWraper","LoadScreen","StyledButton","onClick","page","children","NavbarWraper","setNavigatonPage","NextButtonWrapper","PaginatonWrapper","Pagination","NextButton","setPage","placeholder","toString","onKeyDown","e","keyCode","target","value","handleKeyPress","SearchBarWrapper","onChange","setSearchContent","useLocalObservable","useEffect","destroyStore","getNavigationPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47b56c3b.chunk.js","sourcesContent":["export enum NavPage {\r\n      TRENDING,\r\n      SEARCH,\r\n}","export class Giph {\r\n      name: string;\r\n      url: string;\r\n      \r\n      constructor(name: string, url: string) {\r\n            this.name = name;\r\n            this.url = url;\r\n      }\r\n}","import { NavPage } from \"./NavPage\";\r\nimport {action, autorun, computed, makeObservable, observable} from \"mobx\";\r\nimport { Giph } from \"./Giph\";\r\n\r\nexport class Store {\r\n\r\n      static APIKey = \"b19u8eF8VgRCUL3uNwuWQYaizXwdpMUD\";\r\n      static maxGifsPerPage: number = 9;\r\n      disposer;\r\n      \r\n      @observable giphs: Giph[];\r\n      @observable currentNavPage: NavPage;\r\n      @observable isLoaded: boolean;\r\n      @observable currentPage: number;\r\n      @observable totalPages: number;\r\n      @observable searchContent: string;\r\n\r\n      constructor() {\r\n            this.giphs = [];\r\n            this.currentNavPage = NavPage.TRENDING;\r\n            this.isLoaded = false;\r\n            this.currentPage = 1;\r\n            this.totalPages = 1;\r\n            this.searchContent = '';\r\n            \r\n            this.disposer = autorun(() => {\r\n                  this.deleteGiphs();\r\n                  this.fetchContent(this.currentNavPage, this.currentPage, this.searchContent);\r\n            });\r\n            makeObservable(this);\r\n      }\r\n\r\n\r\n      destroyStore(): void {\r\n            this.disposer();\r\n      }\r\n\r\n      @action setNavigatonPage(navPage: NavPage) {\r\n            this.currentNavPage = navPage;\r\n            this.currentPage = 1;\r\n      }\r\n\r\n      @computed get getNavigationPage() {\r\n            return this.currentNavPage;\r\n      }\r\n\r\n      @action addGiph(title: string, url: string) {\r\n            this.giphs.push(new Giph(title, url));\r\n      }\r\n\r\n      @action deleteGiphs() {\r\n            this.giphs = [];\r\n      }\r\n\r\n      @action setLoaded() {\r\n            this.isLoaded = true;\r\n      }\r\n\r\n      @action setSearchContent(searchContent: string) {\r\n            this.searchContent = searchContent;\r\n      }\r\n\r\n      @action setPage(type: string, searchResult?: string) {\r\n            switch(type) {\r\n            case \"next\":\r\n                  if (this.currentPage < this.totalPages) {\r\n                        this.currentPage += 1;\r\n                  }\r\n                  break;\r\n            case \"previous\":\r\n                  if (this.currentPage > 1) {\r\n                        this.currentPage -= 1;\r\n                  }\r\n                  break;\r\n            case \"search\":\r\n                  let searchAsNumber = parseInt(searchResult || \"1\");\r\n\r\n                  if (searchAsNumber > this.totalPages) {\r\n                        this.currentPage = this.totalPages;  \r\n                  } else if (isNaN(searchAsNumber)){\r\n                        this.currentPage = 1;\r\n                  } else {\r\n                        this.currentPage = searchAsNumber;\r\n                  }\r\n                  break;\r\n            }\r\n            \r\n      }\r\n\r\n      @computed get getPage() {\r\n            return this.currentPage;\r\n      }\r\n\r\n      @action createURL(navPage: NavPage, searchContent?: string) {\r\n            let url = \"\";\r\n\r\n            switch(navPage) {\r\n                  case NavPage.TRENDING:\r\n                        url = `https://api.giphy.com/v1/gifs/trending?api_key=${Store.APIKey}&limit=${Store.maxGifsPerPage}&offset=${(this.currentPage - 1) * Store.maxGifsPerPage}`;\r\n                        break;\r\n\r\n                  case NavPage.SEARCH:\r\n                        url = `https://api.giphy.com/v1/gifs/search?api_key=${Store.APIKey}&limit=${Store.maxGifsPerPage}&offset=${(this.currentPage - 1) * Store.maxGifsPerPage}&q=${searchContent}`;\r\n                        break;\r\n            }\r\n\r\n            return url;\r\n      }\r\n\r\n      @action fetchContent(navPage: NavPage, currentPage: number, searchContent?: string) {\r\n            let url = this.createURL(navPage, searchContent);\r\n            this.isLoaded = false;\r\n\r\n            fetch(url)\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                  (json.data.forEach((row: { title: string; images: { fixed_height: { url: string; }; }; }) => {  \r\n                        this.addGiph(row.title, row.images.fixed_height.url);\r\n                  }));\r\n                  let allGiphs = json.pagination.total_count;\r\n\r\n                  this.totalPages = Math.ceil(allGiphs / Store.maxGifsPerPage)\r\n\r\n                  this.setLoaded();\r\n            });     \r\n      }\r\n}","import {createGlobalStyle} from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n      html, body {\r\n            min-height: 100%;\r\n            font-family: helvetica;\r\n      }\r\n`;","import { observer } from \"mobx-react-lite\";\r\nimport { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface giphProps{\r\n      name: string;\r\n      url: string;\r\n      // key: number;\r\n}\r\n\r\nconst GiphView:FC<giphProps> = (props) => {\r\n      return (\r\n      <GiphWrapper>\r\n            <p>{props.name}</p>\r\n            <img src={props.url} alt=\"not loaded\"></img>\r\n      </GiphWrapper>\r\n      )\r\n}\r\n\r\nconst GiphWrapper = styled.div`\r\n      text-align: center;\r\n      padding: 2em;\r\n`;\r\n\r\nexport default observer(GiphView);","import { observer } from \"mobx-react-lite\";\r\nimport { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Store } from \"../../logic/Store\";\r\nimport GiphView from \"./GiphView\";\r\n\r\ninterface GiphGalleryProps{\r\n      store: Store;\r\n}\r\n\r\nconst GiphGallery:FC<GiphGalleryProps> = (props) => {\r\n\r\n      return (\r\n      <GalleryWrapper>\r\n            {props.store.giphs.map((currentGif, key) => <GiphView name={currentGif.name} url={currentGif.url} key={key}></GiphView> )}\r\n      </GalleryWrapper>\r\n      )\r\n}\r\n\r\nconst GalleryWrapper = styled.div`\r\n      display: grid;\r\n      justify-content: center;\r\n      \r\n      grid-template-columns: 1fr 1fr 1fr;\r\n      grid-template-rows: auto;\r\n      gap: 1em;\r\n`;\r\nexport default observer(GiphGallery);","import { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface LoadScreenProps {\r\n\r\n}\r\n\r\n\r\nconst LoadScreen: FC<LoadScreenProps> = (props) => {\r\n\r\n      return (\r\n            <ImageWraper>\r\n                  <img src=\"../resources/loading-animated.gif\" alt=\"load screen not loaded, that's awkward\"/>\r\n            </ImageWraper>\r\n            \r\n      )\r\n}\r\n\r\nconst ImageWraper = styled.div`\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n`;\r\n\r\nexport default LoadScreen;","import { observer } from \"mobx-react-lite\";\r\nimport { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Store } from \"../../logic/Store\";\r\n\r\n\r\n\r\ninterface ButtonProps {\r\n      store: Store;\r\n      onClick(): void;\r\n}\r\n\r\nconst MenuButton: FC<ButtonProps> = (props) => {\r\n\r\n      function handleClick(page: any) {\r\n            props.onClick();\r\n      }\r\n\r\n      return (\r\n            <StyledButton onClick={handleClick}>{props.children}</StyledButton>\r\n      )\r\n\r\n}\r\n\r\nconst StyledButton = styled.div`\r\n      text-align: center;\r\n      font-size: 25px;\r\n      background-color: #F9EADC;\r\n      color: #000000;\r\n      border: none;\r\n      border-radius: 5px;\r\n      padding: 20px;\r\n      width: 5em;\r\n      margin: 5px;\r\n      cursor: pointer;\r\n\r\n      :hover {\r\n            background-color: #f2e3d5;\r\n      }\r\n`;\r\n\r\nexport default observer(MenuButton);","import React, { FC } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { NavPage } from \"../../logic/NavPage\";\r\nimport { Store } from \"../../logic/Store\";\r\nimport MenuButton from \"./MenuButton\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\ninterface NavProps {\r\n      store: Store;\r\n}\r\n\r\nconst Navbar: FC<NavProps> = (props) => {\r\n\r\n      return (\r\n      <NavbarWraper>\r\n            <MenuButton store={props.store} onClick={() => props.store.setNavigatonPage(NavPage.TRENDING)}>Trending</MenuButton>\r\n            \r\n            <MenuButton store={props.store} onClick={() => props.store.setNavigatonPage(NavPage.SEARCH)}>Search</MenuButton>\r\n      </NavbarWraper>\r\n      )\r\n}\r\n\r\nconst NavbarWraper = styled.div`\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding: 1em;\r\n`;\r\n\r\nexport default observer(Navbar);","import { observer } from \"mobx-react-lite\";\r\nimport { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Store } from \"../../logic/Store\";\r\n\r\ninterface ButtonProps {\r\n      store: Store;\r\n      onClick(): void;\r\n}\r\n\r\nconst MenuButton: FC<ButtonProps> = (props) => {\r\n\r\n      function handleClick() {\r\n            props.onClick();\r\n      }\r\n\r\n      return (\r\n            <NextButtonWrapper onClick={handleClick}>{props.children}</NextButtonWrapper>\r\n      )\r\n\r\n}\r\n\r\nconst NextButtonWrapper = styled.div`\r\n      text-align: center;\r\n      font-size: 10px;\r\n      background-color: #F9EADC;\r\n      color: #000000;\r\n      border: none;\r\n      border-radius: 5px;\r\n      width: 5em;\r\n      margin: 20px;\r\n      cursor: pointer;\r\n\r\n      :hover {\r\n            background-color: #f2e3d5;\r\n      }\r\n      padding: 1em;\r\n\r\n`;\r\n\r\nexport default observer(MenuButton);","import { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Store } from \"../../logic/Store\";\r\nimport NextButton from \"./NextButton\";\r\n\r\ninterface PaginationProps {\r\n      store: Store;\r\n}\r\n\r\nconst Pagination: FC<PaginationProps> = (props) => {\r\n\r\n      function handleKeyPress(e: any) {\r\n            if (e.keyCode === 13) {\r\n                  props.store.setPage(\"search\", e.target.value)\r\n            }\r\n      }\r\n          \r\n\r\n      return (\r\n      <PaginatonWrapper>\r\n            <NextButton store={props.store} onClick={() => {props.store.setPage(\"previous\")}}>PREVIOUS</NextButton>\r\n            <input type=\"text\" \r\n                  placeholder={props.store.currentPage.toString()}\r\n                  onKeyDown={(e) => handleKeyPress(e)} >   \r\n            </input>\r\n            <span> / {props.store.totalPages}</span>\r\n            <NextButton store={props.store} onClick={() => {props.store.setPage(\"next\");}}>NEXT</NextButton>\r\n            \r\n      </PaginatonWrapper>\r\n      )\r\n}\r\n\r\nconst PaginatonWrapper = styled.div`\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding: 1em;\r\n\r\n`;\r\n\r\n\r\n\r\nexport default Pagination;","import { observer } from \"mobx-react-lite\";\r\nimport { FC } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Store } from \"../../logic/Store\";\r\n\r\ninterface SearchProps {\r\n      store: Store;\r\n}\r\n\r\nconst SearchBar: FC<SearchProps> = (props) => {\r\n\r\n      function handleChange(e: { target: { value: string; }; }) {\r\n            props.store.setSearchContent(e.target.value);\r\n      }\r\n\r\n      return (\r\n      <SearchBarWrapper>    \r\n            <p>\r\n                  <input type=\"text\" onChange={handleChange} value={props.store.searchContent}/> \r\n            </p>\r\n            \r\n      </SearchBarWrapper>\r\n      )\r\n}\r\n\r\nconst SearchBarWrapper = styled.div`\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n`;\r\n\r\n\r\nexport default observer(SearchBar);","\r\nimport { observer, useLocalObservable } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { NavPage } from '../../logic/NavPage';\r\nimport { Store } from '../../logic/Store';\r\nimport { GlobalStyle } from '../styles/GlobalStyle';\r\nimport GiphContent from './GiphGallery';\r\nimport LoadScreen from './LoadScreen';\r\nimport Navbar from './Navbar';\r\nimport Pagination from './Pagination';\r\nimport SearchBar from './SearchBar';\r\n\r\n\r\nconst App = () => {\r\n  function createStore() {\r\n      return new Store();\r\n  }\r\n\r\n  const store = useLocalObservable(createStore);\r\n\r\n    useEffect(() => {\r\n        return ():void => store.destroyStore();\r\n    }, []);\r\n  \r\n  \r\n  return (\r\n    <>\r\n      <GlobalStyle/>\r\n      <Navbar store={store}></Navbar>\r\n      {!store.isLoaded && <LoadScreen/>}\r\n      {store.getNavigationPage === NavPage.SEARCH && <SearchBar store={store}/>}\r\n      <GiphContent store={store}></GiphContent>\r\n      <Pagination store={store}></Pagination>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './view/components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}