{"version":3,"sources":["logic/Color.ts","logic/Figure.ts","logic/Card.ts","logic/Deck.ts","logic/Game.ts","view/styles/GlobalStyle.ts","view/resources/club.png","view/resources/spade.png","view/resources/diamond.png","view/resources/heart.png","view/components/Card.tsx","view/components/NextButton.tsx","view/components/ScoreDiv.tsx","view/components/App.tsx","index.tsx"],"names":["Color","Figure","Card","val","color","value","this","Deck","deck","figures","Object","values","forEach","figure","nextCard","push","shuffle","i","length","j","Math","floor","random","temp","Game","score","index","bet","prevCardValue","parseInt","getCurrentCard","flipCard","newCardValue","GlobalStyle","createGlobalStyle","StyledCardValue","styled","span","StyledCardColor","img","CardWrapper","div","props","cardImage","cardValue","club","spade","heart","diamond","className","src","alt","StyledNextButton","button","NextButton","onClick","disabled","children","StyledScore","ScoreDiv","game","ButtonWrapper","App","useState","getScore","setScore","setCardValue","cardColor","setCardColor","isDisabled","setIsDisabled","moveToNext","isFinished","compareCards","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cc0b6ba.chunk.js","sourcesContent":["export enum Color {\r\n        CLUBS = \"Clubs\",\r\n        SPADES = \"Spades\",\r\n        DIAMONDS = \"Diamonds\",\r\n        HEARTS = \"Hearts\"\r\n}","export enum Figure {\r\n        ACE = \"1\",\r\n        TWO = \"2\",\r\n        THREE = \"3\",\r\n        FOUR = \"4\",\r\n        FIVE = \"5\",\r\n        SIX = \"6\",\r\n        SEVEN = \"7\",\r\n        EIGHT = \"8\",\r\n        NINE = \"9\",\r\n        TEN = \"10\",\r\n        JACK = \"11\",\r\n        QUEEN = \"12\",\r\n        KING = \"13\"\r\n}","export class Card {\r\n        value: string;\r\n        color: string;\r\n\r\n        constructor(val: string, color: string) {\r\n                this.value = val;\r\n                this.color = color;\r\n        }\r\n}","import { Card } from \"./Card\";\r\nimport { Color } from \"./Color\";\r\nimport { Figure } from \"./Figure\";\r\n\r\nexport class Deck {\r\n        deck: Array<Card>;\r\n\r\n        constructor() {\r\n                this.deck = [];\r\n\r\n                const figures = Object.values(Figure);\r\n                const colors = Object.values(Color);\r\n\r\n                colors.forEach((color) => {\r\n                        figures.forEach((figure) => {\r\n                                let nextCard = new Card(figure, color);\r\n                                this.deck.push(nextCard);\r\n                        })\r\n                })\r\n\r\n                this.shuffle();\r\n        }\r\n\r\n        shuffle() {\r\n                for (let i = this.deck.length - 1; i > 0; i--) {\r\n                        let j = Math.floor(Math.random() * i);\r\n                        let temp = this.deck[i];\r\n                        this.deck[i] = this.deck[j];\r\n                        this.deck[j] = temp;\r\n                    }\r\n        }\r\n}","import { Deck } from \"./Deck\";\r\n\r\nexport class Game {\r\n      deck: Deck;\r\n      score: number;\r\n      index: number = 0;\r\n      \r\n      constructor() {\r\n            this.deck = new Deck();\r\n            this.score = 0;\r\n      }\r\n\r\n      compareCards(bet: string) {\r\n            let prevCardValue = parseInt(this.getCurrentCard().value);\r\n\r\n            this.flipCard();\r\n\r\n            let newCardValue = parseInt(this.getCurrentCard().value);\r\n\r\n            if ((prevCardValue < newCardValue) && bet === \"higher\") {\r\n                  this.score += 1;\r\n            } else if ((prevCardValue > newCardValue) && bet === \"lower\") {\r\n                  this.score += 1;\r\n            }\r\n      }\r\n\r\n\r\n      getCurrentCard() {\r\n            return this.deck.deck[this.index];\r\n      }\r\n\r\n      flipCard() {\r\n            this.index += 1;\r\n      }\r\n\r\n      getScore() {\r\n            return this.score;\r\n      }\r\n\r\n      isFinished(): boolean {\r\n            if(!this.deck.deck[this.index + 1]) {\r\n                  return true;\r\n            }\r\n            return false;\r\n      }\r\n}","import {createGlobalStyle} from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n      html, body {\r\n            min-height: 100%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-family: helvetica;\r\n      }\r\n`;","export default __webpack_public_path__ + \"static/media/club.ec6a61f9.png\";","export default __webpack_public_path__ + \"static/media/spade.14023e01.png\";","export default __webpack_public_path__ + \"static/media/diamond.6c36abff.png\";","export default __webpack_public_path__ + \"static/media/heart.ea1364ae.png\";","import React from 'react';\r\nimport { FC } from 'react';\r\nimport club from \"../resources/club.png\";\r\nimport spade from \"../resources/spade.png\";\r\nimport diamond from \"../resources/diamond.png\";\r\nimport heart from \"../resources/heart.png\";\r\nimport styled from 'styled-components';\r\n\r\ninterface CardProps {\r\n      color: string;\r\n      value: string;\r\n}\r\n\r\nconst StyledCardValue = styled.span`\r\n      font-size: 175px;\r\n      font-weight: 600;\r\n      margin-right: 0.1em;\r\n`;\r\n\r\nconst StyledCardColor = styled.img`\r\n      max-width: 140px;\r\n`;\r\n\r\nconst CardWrapper = styled.div`\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n`;\r\n\r\nconst Card:FC<CardProps> = (props) => {\r\n     \r\n      let cardImage;\r\n      let cardValue;\r\n\r\n      switch(props.color) {\r\n            case \"Clubs\":\r\n                  cardImage = club;\r\n                  break;\r\n            case \"Spades\":\r\n                  cardImage = spade;\r\n                  break;\r\n            case \"Hearts\":\r\n                  cardImage = heart;\r\n                  break;\r\n            case \"Diamonds\":\r\n                  cardImage = diamond;\r\n                  break;\r\n      }\r\n\r\n      switch(props.value) {\r\n            case \"11\":\r\n                  cardValue = \"J\";\r\n                  break;\r\n            case \"12\":\r\n                  cardValue = \"Q\";\r\n                  break;\r\n            case \"13\":\r\n                  cardValue = \"K\";\r\n                  break;\r\n            case \"1\":\r\n                  cardValue = \"A\";\r\n                  break;\r\n            default:\r\n                  cardValue = props.value;\r\n                  break;\r\n      }\r\n\r\n      return (\r\n            <CardWrapper className=\"Card\">\r\n                  <StyledCardValue>{cardValue}</StyledCardValue>\r\n                  <StyledCardColor src={cardImage} alt=\"\"/>\r\n            </CardWrapper>\r\n      );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport { FC } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ButtonProps {\r\n      disabled: boolean; \r\n      onClick: () => void;\r\n}\r\n\r\nconst StyledNextButton = styled.button`   \r\n      text-align: center;\r\n      font-size: 25px;\r\n      background-color: #F9EADC;\r\n      color: #000000;\r\n      border: none;\r\n      border-radius: 5px 20px 5px;\r\n      padding: 20px;\r\n      width: 5em;\r\n      margin: 5px;\r\n      cursor: pointer;\r\n\r\n      :hover {\r\n            background-color: #f2e3d5;\r\n      }\r\n`;\r\n\r\nconst NextButton:FC<ButtonProps> = (props) => {     \r\n      function handleClick() {\r\n            if (props.disabled) {\r\n                  return;\r\n            }\r\n            else {\r\n                  props.onClick();\r\n            }\r\n      }\r\n\r\n      return (\r\n            <StyledNextButton onClick={handleClick}>{props.children} </StyledNextButton>\r\n      );\r\n}     \r\n\r\nexport default NextButton;    ","import React from 'react';\r\nimport { FC } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledScore = styled.div`\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      font-size: 25px;\r\n      margin-top: 2em;\r\n`;\r\n\r\ninterface ScoreProps {\r\n      // why does it have to be declared even without children element to work?\r\n}\r\n\r\nconst ScoreDiv:FC<ScoreProps> = (props) => {\r\n\r\n      return (\r\n            <StyledScore>{props.children}</StyledScore>\r\n      );\r\n}\r\n\r\nexport default ScoreDiv;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Game } from \"../../logic/Game\";\nimport { GlobalStyle } from '../styles/GlobalStyle';\nimport Card from './Card';\nimport NextButton from './NextButton';\nimport ScoreDiv from './ScoreDiv';\n\n\nlet game = new Game();\n\nconst ButtonWrapper = styled.div`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n`;\n\n\nfunction App() {\n  const [score, setScore] = useState(game.getScore());\n  const [cardValue, setCardValue] = useState(game.getCurrentCard().value);\n  const [cardColor, setCardColor] = useState(game.getCurrentCard().color);\n  const [isDisabled, setIsDisabled] = useState(false);\n\n\n  function moveToNext(bet: string) {\n    if(!game.isFinished()) {\n      game.compareCards(bet);\n    } else {\n      setIsDisabled(true);\n    }\n\n    setScore(game.getScore());\n    setCardValue(game.getCurrentCard().value);\n    setCardColor(game.getCurrentCard().color);\n  }\n\n  return (\n    <>\n      <GlobalStyle/>\n      <Card color={cardColor} value={cardValue}></Card>\n      <ButtonWrapper>\n        <NextButton disabled={isDisabled} onClick={() => moveToNext(\"higher\")}>Higher</NextButton>\n        <NextButton disabled={isDisabled} onClick={() => moveToNext(\"lower\")}>Lower</NextButton>\n      </ButtonWrapper>\n      {!isDisabled && <ScoreDiv>Current score: {score}</ScoreDiv>}\n      {isDisabled && <ScoreDiv>Game over, your final score is {score}</ScoreDiv>}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './view/components/App';\n  \nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}